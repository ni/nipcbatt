name: CI

on:
  push:
    branches:
      - main
      - 'releases/**'
  workflow_call:
  workflow_dispatch:

env:
      PYTHON_VERSION: 3.9
      POETRY_VERSION: 1.8.4
      ARCHITECTURE: 'x64'

jobs:
  build:
    runs-on: [windows-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          architecture: ${{ env.ARCHITECTURE }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check Windows architecture
        run: |
            echo "Running on architecture:"
            echo %PROCESSOR_ARCHITECTURE%  
      - name: Check Python architecture
        run: |
              python -c "import platform; print('Platform architecture:', platform.architecture())"

      - uses: Gr1N/setup-poetry@v9
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Check Poetry version
        run: poetry --version

      - name: Install the Package
        run: poetry install -vvv
      - name: Check Poetry version
        run: poetry --version

      - name: Run the formattor
        run: poetry run black --check --diff .

      - name: Lint the Code
        run: poetry run ni-python-styleguide lint

      - name: Run tests
        # run: poetry run pytest -v
        run: poetry run pytest --verbose --doctest-modules --junitxml=junit/test-results-${{ env.PYTHON_VERSION }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{env.PYTHON_VERSION }}
          path: junit/test-results-${{ env.PYTHON_VERSION }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Build Python package
        run: poetry build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist
            !dist/**/*.md
